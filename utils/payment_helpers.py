from aiogram.filters import Command  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Command –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –∫–æ–º–∞–Ω–¥
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database import is_partner, add_product_to_db, get_all_products, get_product_by_code
from config import DEFAULT_LANGUAGE

router = Router()


# –®–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
class AddProductForm(StatesGroup):
    name = State()  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    description = State()  # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    price = State()  # –¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞


@router.message(Command(commands=["add_product"]))
async def start_add_product(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    user_language = user_data.get('language', DEFAULT_LANGUAGE)

    # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    if not await is_partner(message.from_user.id):
        response = "Only partners can add products." if user_language == "en" else "–¢–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω—ë—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã."
        await message.answer(response)
        return

    prompt = "Please enter the product name:" if user_language == "en" else "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:"
    await message.answer(prompt)
    await state.set_state(AddProductForm.name)


@router.message(AddProductForm.name)
async def add_product_name(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_language = user_data.get('language', DEFAULT_LANGUAGE)

    await state.update_data(name=message.text)
    prompt = "Please enter the product description:" if user_language == "en" else "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:"
    await message.answer(prompt)
    await state.set_state(AddProductForm.description)


@router.message(AddProductForm.description)
async def add_product_description(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_language = user_data.get('language', DEFAULT_LANGUAGE)

    await state.update_data(description=message.text)
    prompt = "Please enter the product price (in VED):" if user_language == "en" else "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞ (–≤ VED):"
    await message.answer(prompt)
    await state.set_state(AddProductForm.price)


@router.message(AddProductForm.price)
async def add_product_price(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_language = user_data.get('language', DEFAULT_LANGUAGE)

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –≤ float
        price = float(message.text)
        data = await state.get_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if not data.get("name") or not data.get("description"):
            response = "Product name and description must be filled." if user_language == "en" else "–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã."
            await message.answer(response)
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await add_product_to_db(
            name=data["name"],
            description=data["description"],
            price=price,
            partner_id=message.from_user.id
        )

        response = "Product successfully added!" if user_language == "en" else "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
        await message.answer(response)
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

    except ValueError:
        response = "Price must be a number. Please enter it again." if user_language == "en" else "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞."
        await message.answer(response)
@router.message(Command(commands=["products"]))
async def list_products(message: Message):
    products = await get_all_products()  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    response = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n"
    for product in products:
        # –ó–∞–º—ã–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        name = product["name"] if not product.get("is_personal") else "–ü—Ä–æ–¥—É–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–æ–¥—É"
        response += f"üîπ {name} ‚Äî {product['price']} VED\n"
    response += "\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞."
    await message.answer(response)

@router.message()
async def get_product_info(message: Message):
    product_code = message.text.strip()
    product = await get_product_by_code(product_code)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –∫–æ–¥—É
    if product:
        text = (
            f"üõí –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
            f"üí∞ –¶–µ–Ω–∞: {product['price']} VED\n"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å"
        keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"buy:{product['id']}"))
        await message.answer_photo(product["image"], caption=text, reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")