from aiogram import Router, types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from database import connect_db, add_user, get_user_role, set_user_role,get_referral_bonus
from messages import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
from config import DEFAULT_LANGUAGE, ADMIN_ID

router = Router()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def get_language_markup():
    buttons = [
        InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="language_ru"),
        InlineKeyboardButton(text="English", callback_data="language_en")
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=[buttons])
    return markup


@router.callback_query(lambda callback: callback.data.startswith("language_"))
async def process_language_selection(callback: CallbackQuery):
    selected_language = callback.data.split("_")[1]
    if selected_language == "ru":
        await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.")
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif selected_language == "en":
        await callback.message.answer("You selected English.")
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ


@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    user = message.from_user
    user_id = user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã /start (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥)
    args = message.text.split()[1:]  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –±–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE user_id = ?", (user_id,))
        user_exists = cursor.fetchone()

        if not user_exists:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            await add_user(user_id=user.id, username=user.username, first_name=user.first_name)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admin_message = (
                f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è:\n"
                f"üÜî ID: {user.id}\n"
                f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üí¨ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
            )

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            with connect_db() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT user_id FROM users WHERE role = 'admin'")
                admins = cursor.fetchall()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            for admin in admins:
                admin_id = admin[0]  # –ò–Ω–¥–µ–∫—Å 0, —Ç–∞–∫ –∫–∞–∫ fetchall –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂–∏
                try:
                    await message.bot.send_message(chat_id=admin_id, text=admin_message)
                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if args and args[0].startswith("ref"):
                try:
                    referrer_id = int(args[0].replace("ref", ""))  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    if referrer_id != user_id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–µ—Ñ–µ—Ä–∏–ª —Å–∞–º —Å–µ–±—è
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                        referrer_role = await get_user_role(referrer_id)
                        if not referrer_role:
                            referrer_role = "user"  # –†–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                        # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                        referral_bonus = get_referral_bonus(event_type="registration", role=referrer_role)

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ –≤ —Ç–∞–±–ª–∏—Ü–µ "referrals"
                        cursor.execute(""" 
                            INSERT INTO referrals (referrer_id, referred_id)
                            VALUES (?, ?)
                        """, (referrer_id, user_id))

                        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
                        cursor.execute("""
                            UPDATE users
                            SET balance = balance + ?
                            WHERE user_id = ?
                        """, (referral_bonus, referrer_id))
                        conn.commit()

                        await message.answer(
                            referral_registration_message_ru if DEFAULT_LANGUAGE == 'ru' else referral_registration_message_en)
                    else:
                        await message.answer(
                            referral_error_message_ru if DEFAULT_LANGUAGE == 'ru' else referral_error_message_en)
                except ValueError:
                    await message.answer(
                        invalid_referral_code_message_ru if DEFAULT_LANGUAGE == 'ru' else invalid_referral_code_message_en)
            else:
                await message.answer(
                    registration_success_message_ru if DEFAULT_LANGUAGE == 'ru' else registration_success_message_en)

        else:
            await message.answer(
                already_registered_message_ru if DEFAULT_LANGUAGE == 'ru' else already_registered_message_en)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = await get_user_role(message.from_user.id)

    # –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é
    menu_buttons = [
        [KeyboardButton(text="–ü—Ä–æ–¥—É–∫—Ç—ã"), KeyboardButton(text="–î–ª—è –¥—Ä—É–∑–µ–π")],
        [KeyboardButton(text="–ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="–ü–∞—Ä—Ç–Ω–µ—Ä—ã")],
        [KeyboardButton(text="–ò–Ω—Ñ–æ"), KeyboardButton(text="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")],
    ]
    if user_role == 'admin' or user.id == int(ADMIN_ID):
        menu_buttons.append([KeyboardButton(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")])
    menu_markup = ReplyKeyboardMarkup(keyboard=menu_buttons, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=menu_markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await state.set_state("main_menu")
    await state.update_data(language=DEFAULT_LANGUAGE)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª–∏, –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    role = await get_user_role(user.id)
    if not role:
        await set_user_role(user.id, "user")  # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å "user" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


@router.message(lambda message: message.text == "–†—É—Å—Å–∫–∏–π")
async def set_russian(message: Message, state: FSMContext):
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.")
    await state.update_data(language="ru")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –ª–æ–≥–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    await continue_registration(message, state)


@router.message(lambda message: message.text == "English")
async def set_english(message: Message, state: FSMContext):
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await message.answer("You selected English.")
    await state.update_data(language="en")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –ª–æ–≥–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    await continue_registration(message, state)


async def continue_registration(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_language = data.get("language", "en")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

    # –õ–æ–≥–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    if user_language == 'ru':
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")  # –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    else:
        await message.answer("Welcome! Registration is complete.")  # –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
