from aiogram import Router, types, F
from datetime import datetime, timedelta
from aiogram.fsm.context import FSMContext
from config import ADMIN_ID
from aiogram.filters import Command, CommandStart, StateFilter, BaseFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton,InlineKeyboardButton,InlineKeyboardMarkup,CallbackQuery,Message,ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database import (get_user_courses, get_course_progress, get_user_products,get_user_role,get_product_by_id,
                      get_user_purchase_for_product,is_partner,is_admin,get_courses_by_partner,get_lessons_for_course,
                      add_question,get_partner_products,get_users_by_product_partner,get_lessons_by_course_id,
                      get_lesson_by_id,get_questions_by_lesson_id,get_question_by_id,get_user_by_id,get_product_by_id_for_purchases,
                      get_lesson_by_id_for_purchase,get_product_and_partner_by_id,get_partner_by_product_id,insert_partner_question,
                      mark_question_as_answered,get_unanswered_questions_by_partner,get_question_from_user_by_id,get_question_from_user_by_product_and_question_id,
                      get_user_progress,update_user_progress,get_next_question_id,create_user_progress,get_next_question_in_lesson,
                      connect_db,update_user_language,load_texts,get_user_language,get_course_by_id,add_course,add_lesson,get_random_image,get_random_aphorism)# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
import logging
import json
from handlers.menu_handler import back_to_main_menu
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

texts = load_texts("texts.xlsx")

router = Router()
class PartnerFilter(BaseFilter):
    async def __call__(self, message: types.Message):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        return await is_partner(message.from_user.id) or await is_admin(message.from_user.id)
class AskPartnerState(StatesGroup):
    waiting_for_message = State()

class waitPartnerAnswer(StatesGroup):
    waiting_for_answer = State()

class QuestionStates(StatesGroup):
    waiting_for_course_selection = State()
    waiting_for_lesson_selection = State()
    waiting_for_question_text = State()
    waiting_for_options = State()
    waiting_for_correct_option = State()
    waiting_for_more_questions = State()

class BroadcastState(StatesGroup):
    waiting_for_product_choice = State()
    waiting_for_message = State()

async def update_state_and_ask(
    message: types.Message,
    state: FSMContext,
    key: str,
    value: str,
    next_question: str,
    next_state: str
):
    await state.update_data({key: value})
    await message.answer(next_question)
    await state.set_state(next_state)


@router.message(
    lambda message: message.text and message.text.strip() in {str(texts['personal_account'].get(lang, '') or '').strip()
                                                              for lang in texts['personal_account']})
async def personal_info_menu(message: types.Message, state: FSMContext):
    user_role = await get_user_role(message.from_user.id)
    user_language = await get_user_language(message.from_user.id)

    buttons = [
        [KeyboardButton(text=texts['purchases_button'][user_language]),
         KeyboardButton(text=texts['donations_button'][user_language])],
        [KeyboardButton(text=texts['participate_in_the_lottery_button'][user_language]),
         KeyboardButton(text=texts['tickets_button'][user_language])],
        [KeyboardButton(text=texts['language_button'][user_language])],
    ]

    if user_role == 'partner' or user_role == 'admin':
        buttons.append([KeyboardButton(text=texts['add_lesson_button'][user_language]),
                        KeyboardButton(text=texts['add_question_button'][user_language])])
        buttons.append([KeyboardButton(text=texts['products_partner_button'][user_language]),
                        KeyboardButton(text=texts['questions_button'][user_language])])

    buttons.append([KeyboardButton(text=texts['back_to_main_menu_button'][user_language])])

    # –£–∫–∞–∑—ã–≤–∞–µ–º 'keyboard' –∫–∞–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    if user_language == "ru":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)
    else :
        await message.answer("Select the section you are interested in:", reply_markup=keyboard)


@router.message(lambda message: message.text and message.text.strip() in {str(texts['purchases_button'].get(lang, '') or '').strip() for lang in texts['purchases_button']})
async def show_purchases(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤."""
    user_language = await get_user_language(message.from_user.id)
    user_id = message.from_user.id
    courses = get_user_courses(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –∏–∑ –ë–î
    products = get_user_products(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –ë–î

    if not courses and not products:
        await message.answer(texts['no_purchases'].get(user_language, texts['no_purchases']['en']))
        return

    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫—É—Ä—Å–æ–≤
    if courses:
        buttons.extend([InlineKeyboardButton(text=f"üìò –ö—É—Ä—Å: {course['title']}", callback_data=f"course_{course['id']}") for course in courses])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    if products:
        if user_language == "ru" :
            buttons.extend([InlineKeyboardButton(text=f"üõí –ü—Ä–æ–¥—É–∫—Ç: {product['name']}", callback_data=f"product_{product['id']}") for product in products])
        else :
            buttons.extend(
                [InlineKeyboardButton(text=f"üõí Products: {product['name']}", callback_data=f"product_{product['id']}")
                 for product in products])


    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])  # –ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º inline_keyboard
    await message.answer(
        texts['purchases_list'].get(user_language, texts['purchases_list']['en']),
        reply_markup=keyboard
    )


@router.callback_query(lambda query: query.data.startswith("product_"))
async def product_info(query: types.CallbackQuery, state: FSMContext):
    product_id = query.data.split("_")[1]
    user_language = await get_user_language(query.from_user.id)
    product = get_product_by_id_for_purchases(product_id)
    if not product:
        if user_language == "ru":
            await query.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        else :
            await query.answer("Product not found.")
            return

    if user_language == "ru":
        # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        product_info = f"üõí <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {product['name']}\n"
        product_info += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
        product_info += f"<b>–¶–µ–Ω–∞:</b> {product['price']} VED\n"
        if product.get('category'):
            product_info += f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product['category']}\n"
        if product.get('code'):
            product_info += f"<b>–ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞:</b> {product['code']}\n"
        if product.get('after_purchase'):
            product_info += f"<b>–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏:</b> {product['after_purchase']}\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
        await state.update_data(product_info=product_info, product_id=product_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
        course_id = product.get('course_id')
        if course_id:
            lessons = get_lessons_by_course_id(course_id)

            if not lessons:
                await query.message.answer("–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.")
                await query.answer()
                return

            lesson_buttons = [
                InlineKeyboardButton(text=lesson[2], callback_data=f"lesson_{lesson[0]}")
                for lesson in lessons if isinstance(lesson, tuple) and len(lesson) >= 4
            ]

            if lesson_buttons:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[button] for button in lesson_buttons])
                await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:", reply_markup=keyboard, parse_mode="HTML")
            else:
                await query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞.")
        else:
            # –ï—Å–ª–∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if product.get("image"):
                await query.message.answer_photo(photo=product["image"], caption=product_info, parse_mode="HTML")
            else:
                await query.message.answer(product_info, parse_mode="HTML")

    elif user_language == "en":
        # Starting message with main product information
        product_info = f"üõí <b>Product:</b> {product['name']}\n"
        product_info += f"<b>Description:</b> {product.get('description', 'Description not available')}\n"
        product_info += f"<b>Price:</b> {product['price']} VED\n"
        if product.get('category'):
            product_info += f"<b>Category:</b> {product['category']}\n"
        if product.get('code'):
            product_info += f"<b>Product Code:</b> {product['code']}\n"
        if product.get('after_purchase'):
            product_info += f"<b>After purchase:</b> {product['after_purchase']}\n"

        # Save product information in FSM state
        await state.update_data(product_info=product_info, product_id=product_id)

        # Check for educational module
        course_id = product.get('course_id')
        if course_id:
            lessons = get_lessons_by_course_id(course_id)

            if not lessons:
                await query.message.answer("There are no lessons available for this product.")
                await query.answer()
                return

            lesson_buttons = [
                InlineKeyboardButton(text=lesson[2], callback_data=f"lesson_{lesson[0]}")
                for lesson in lessons if isinstance(lesson, tuple) and len(lesson) >= 4
            ]

            if lesson_buttons:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[button] for button in lesson_buttons])
                await query.message.answer("Select a lesson to proceed:", reply_markup=keyboard, parse_mode="HTML")
            else:
                await query.message.answer("No lessons available for this course.")
        else:
            # If the product has an image, send it; otherwise, just send the information
            if product.get("image"):
                await query.message.answer_photo(photo=product["image"], caption=product_info, parse_mode="HTML")
            else:
                await query.message.answer(product_info, parse_mode="HTML")

    await query.answer()


@router.callback_query(lambda query: query.data.startswith("lesson_"))
async def lesson_info(query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É—Ä–æ–∫."""
    lesson_id = query.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —É—Ä–æ–∫–∞ –∏–∑ callback_data
    lesson = get_lesson_by_id_for_purchase(lesson_id)  # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫ –ø–æ ID
    user_language = await get_user_language(query.from_user.id)

    if not lesson:
        if user_language == "ru":
            await query.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await query.answer("Lesson not found.")
        return

    lesson_info = f"<b>–£—Ä–æ–∫:</b> {lesson['title']}\n"
    lesson_info += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {lesson.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ" —á–µ—Ä–µ–∑ InlineKeyboardBuilder
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data=f"start_lesson_{lesson_id}")
    keyboard.adjust(1)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Ä—è–¥–∞ –∫–Ω–æ–ø–æ–∫

    if user_language == "ru":
        await query.message.answer(
            lesson_info,
            reply_markup=keyboard.as_markup(),  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ InlineKeyboardMarkup
            parse_mode="HTML"
        )
    else:  # –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        lesson_info_en = f"<b>Lesson:</b> {lesson['title']}\n"
        lesson_info_en += f"<b>Description:</b> {lesson.get('description', 'Description not available')}\n"

        await query.message.answer(
            lesson_info_en,
            reply_markup=keyboard.as_markup(),  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ InlineKeyboardMarkup
            parse_mode="HTML"
        )

    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É



@router.callback_query(lambda query: query.data.startswith("start_lesson_"))
async def start_lesson(query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞."""

    lesson_id = query.data.split("_")[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —É—Ä–æ–∫–∞
    questions = get_questions_by_lesson_id(lesson_id)  # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ä–æ–∫–∞
    user_language = await get_user_language(query.from_user.id)
    if not questions:
        await query.answer("–í–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." if user_language == "ru" else "No questions found for this lesson.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ product_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSMContext
    data = await state.get_data()
    user_id = query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ query
    product_id = data.get("product_id")

    if not product_id:
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ." if user_language == "ru" else "Failed to get product data.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = connect_db()  # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    cursor = conn.cursor()

    cursor.execute(
        "SELECT current_question_id FROM user_progress WHERE user_id = ? AND lesson_id = ?",
        (user_id, lesson_id)
    )
    user_progress = cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞

    conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

    if user_progress:
        # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å—Ç—å, –Ω–∞—á–∏–Ω–∞–µ–º —Å –≤–æ–ø—Ä–æ—Å–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        current_question_id = user_progress[0]
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        current_question_id = 1

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    current_question = next((q for q in questions if q['id'] == current_question_id), None)

    if not current_question:
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞." if user_language == "ru" else "Error fetching the question.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
    question_text = f"<b>–í–æ–ø—Ä–æ—Å:</b> {current_question['text']}\n" if user_language == "ru" else f"<b>Question:</b> {current_question['text']}\n"
    options = json.loads(current_question['options'])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    buttons = [
        [InlineKeyboardButton(text=option, callback_data=f"answer_{current_question['id']}_{option}")]
        for option in options
    ]

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–í–æ–ø—Ä–æ—Å –ø–∞—Ä—Ç–Ω—ë—Ä—É"
    buttons.append([InlineKeyboardButton(
        text="–í–æ–ø—Ä–æ—Å –ø–∞—Ä—Ç–Ω—ë—Ä—É" if user_language == "ru" else "Ask partner",
        callback_data=f"ask_{product_id}_{current_question['id']}")
    ])

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await query.message.answer(
        question_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É



@router.callback_query(lambda query: query.data.startswith("answer_"))
async def answer_question(query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
    data = await state.get_data()
    product_id = data.get("product_id")  # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞
    question_id, answer = query.data.split("_")[1:3]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç

    question = get_question_by_id(question_id)  # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ ID

    if not question:
        await query.message.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    correct_answer = question['correct_answer']

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}, –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = query.from_user.id
    user_progress = get_user_progress(user_id)
    print(f"User progress data: {user_progress}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user_progress is None:
        # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        create_user_progress(user_id, product_id, question['lesson_id'])  # –ü–µ—Ä–µ–¥–∞–µ–º product_id –∏ lesson_id –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        user_progress = get_user_progress(user_id)  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–Ω–æ–≤–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —É—Ä–æ–∫—É
    if question['lesson_id'] != user_progress['lesson_id']:
        await query.message.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É. –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É—Ä–æ–∫–∞.")
        return

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if str(answer) == str(correct_answer):
        next_question = get_next_question_in_lesson(question['lesson_id'], question['id'])

        if next_question:
            question_text = f"<b>–í–æ–ø—Ä–æ—Å:</b> {next_question.get('text', '–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"

            # –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
            options = next_question['options']
            cleaned_options = [option.strip('[]" ') for option in options]

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            buttons = [
                [InlineKeyboardButton(text=option, callback_data=f"answer_{next_question['id']}_{option}")]
                for option in cleaned_options
            ]

            buttons.append([InlineKeyboardButton(
                text="–í–æ–ø—Ä–æ—Å –ø–∞—Ä—Ç–Ω—ë—Ä—É",
                callback_data=f"ask_{user_progress['product_id']}_{next_question['id']}")])

            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

            await query.message.answer(
                question_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —É—á—ë—Ç–æ–º lesson_id
            update_user_progress(user_id, next_question['id'], user_progress['product_id'], question['lesson_id'])
        else:
            await query.message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!")
    else:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        await query.message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É


@router.callback_query(lambda query: query.data.startswith("ask_"))
async def ask_partner(query: types.CallbackQuery, state: FSMContext):
    logging.debug("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏: %s", query.data)

    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    data = query.data.split("_")

    if len(data) < 3:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.")
        return

    product_id = data[1]  # –ü–æ–ª—É—á–∞–µ–º product_id
    question_id = data[2]  # –ü–æ–ª—É—á–∞–µ–º question_id

    logging.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: product_id={product_id}, question_id={question_id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º product_id –∏ question_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_id=product_id, question_id=question_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    await query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞:")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.set_state(AskPartnerState.waiting_for_message)


import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logger = logging.getLogger(__name__)


from database import insert_partner_question  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞

@router.message(AskPartnerState.waiting_for_message)
async def process_message_for_partner(message: types.Message, state: FSMContext):
    user_message = message.text

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data.get("product_id")
    question_id = data.get("question_id")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    product = get_product_by_id_for_purchases(product_id)
    if not product:
        await message.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    partner_id = product.get('partner_id')
    if not partner_id:
        await message.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º.")
        await state.clear()
        return

    question = get_question_by_id(question_id)
    if not question:
        await message.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    insert_partner_question(
        user_id=message.from_user.id,
        partner_id=partner_id,
        product_id=product_id,
        question_id=question_id,
        question_text=question['text'],
        user_message=user_message
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞
    partner_message = (
        f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É {product['name']}:\n\n"
        f"–í–æ–ø—Ä–æ—Å: {question['text']}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é '–ü–æ—Å—Ç—É–ø–∏–≤—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã'."
    )
    await message.bot.send_message(partner_id, partner_message)

    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Ä—Ç–Ω—ë—Ä—É.")
    await state.clear()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫—É—Ä—Å–∞
@router.message(lambda message: any(
    course["title"].lower() in message.text.lower() for course in get_user_courses(message.from_user.id)))
async def show_course_progress(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É."""
    user_id = message.from_user.id
    course_title = message.text
    course = next(course for course in get_user_courses(user_id) if course["title"] == course_title)
    progress = get_course_progress(user_id, course["id"])  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ –ë–î

    if not progress:
        await message.answer(MESSAGES["personal_info"]["no_progress"])
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    text = (
        f"üìö {progress['course_title']}\n\n"
        f"–£—Ä–æ–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {progress['completed_lessons']}/{progress['total_lessons']}\n"
        f"–í–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {progress['completed_questions']}/{progress['total_questions']}"
    )
    await message.answer(text)

@router.message(lambda message: message.text and message.text.strip() in {str(texts['add_question_button'].get(lang, '') or '').strip() for lang in texts['add_question_button']})
async def add_question_command(message: types.Message, state: FSMContext):
    partner_id = message.from_user.id
    courses = await get_courses_by_partner(partner_id)

    if not courses:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫—É—Ä—Å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_course.")
        return

    lessons = []
    for course in courses:
        lessons.extend(await get_lessons_for_course(course["id"]))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é

    if not lessons:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —É—Ä–æ–∫–∏.")
        return

    buttons = [
        InlineKeyboardButton(text=lesson["title"], callback_data=f"select_lesson_{lesson['id']}")
        for lesson in lessons
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons[i:i+2] for i in range(0, len(buttons), 2)])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å:", reply_markup=keyboard)
    await state.set_state(QuestionStates.waiting_for_lesson_selection)



# 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞
@router.callback_query(lambda c: c.data.startswith("select_lesson_"))
async def handle_lesson_selection(callback_query: CallbackQuery, state: FSMContext):
    lesson_id = int(callback_query.data.split("_")[2])
    await state.update_data(selected_lesson_id=lesson_id)

    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
    await state.set_state(QuestionStates.waiting_for_question_text)


# 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
@router.message(StateFilter(QuestionStates.waiting_for_question_text))
async def process_question_text(message: types.Message, state: FSMContext):
    question_text = message.text
    await state.update_data(question_text=question_text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–µ –±–æ–ª–µ–µ —Ç—Ä–µ—Ö):")
    await state.set_state(QuestionStates.waiting_for_options)


# 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
@router.message(StateFilter(QuestionStates.waiting_for_options))
async def process_options(message: Message, state: FSMContext):
    options = message.text.split(",")
    if len(options) > 3:
        await message.answer("–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(options=options)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1, 2 –∏–ª–∏ 3):")
    await state.set_state(QuestionStates.waiting_for_correct_option)


# 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
@router.message(StateFilter(QuestionStates.waiting_for_correct_option))
async def process_correct_option(message: Message, state: FSMContext):
    try:
        correct_option = int(message.text)
        if correct_option not in [1, 2, 3]:
            raise ValueError

        await state.update_data(correct_option=correct_option)
        data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await add_question(
            question_text=data["question_text"],  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ question_text –≤–º–µ—Å—Ç–æ text
            options=",".join(data["options"]),
            correct_answer=correct_option,
            lesson_id=data["selected_lesson_id"]
        )

        await message.answer("–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å
        await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å? –û—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        await state.set_state(QuestionStates.waiting_for_more_questions)

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ (1, 2 –∏–ª–∏ 3).")


# 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message(StateFilter(QuestionStates.waiting_for_more_questions))
async def process_more_questions(message: types.Message, state: FSMContext):
    if message.text.lower() in ["–¥–∞", "yes"]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:")
        await state.set_state(QuestionStates.waiting_for_question_text)
    else:
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        await state.clear()


@router.message(lambda message: message.text and message.text.strip() in {str(texts['products_partner_button'].get(lang, '') or '').strip() for lang in texts['products_partner_button']})
async def start_broadcast_process(message: Message, state: FSMContext):
    partner_id = message.from_user.id
    print(f"–ü–∞—Ä—Ç–Ω—ë—Ä {partner_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É.")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
    products = get_partner_products(partner_id)
    if not products:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        print(f"–ü–∞—Ä—Ç–Ω—ë—Ä {partner_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(
                text=f"{product['id']} : {product['name']}",
                callback_data=f"broadcast_{product['id']}"
            )]
            for product in products
        ]
    )

    print(f"–ü–∞—Ä—Ç–Ω—ë—Ä {partner_id} –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {', '.join([product['name'] for product in products])}.")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard)
    await state.set_state(BroadcastState.waiting_for_product_choice)


@router.callback_query(F.data.startswith("broadcast_"))
async def broadcast_product(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[1])
    partner_id = callback.from_user.id
    print(f"–ü–∞—Ä—Ç–Ω—ë—Ä {partner_id} –≤—ã–±—Ä–∞–ª –ø—Ä–æ–¥—É–∫—Ç —Å ID: {product_id} –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ FSM
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å product_id: {product_id}, partner_id: {partner_id}")
    await state.update_data(product_id=product_id, partner_id=partner_id)

    current_state = await state.get_data()
    print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞
    users_to_notify = get_users_by_product_partner(partner_id, product_id)

    if not users_to_notify:
        await callback.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.")
        print(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É {product_id}.")
        return

    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    await callback.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.set_state(BroadcastState.waiting_for_message)
    print("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: BroadcastState.waiting_for_message")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@router.message(BroadcastState.waiting_for_message)
async def send_broadcast(message: Message, state: FSMContext):
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        logger.debug(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {data}")

        product_id = data.get('product_id')
        partner_id = data.get('partner_id')

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ product_id: {product_id}")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ partner_id: {partner_id}")

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        if not product_id:
            logger.error(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å product_id. –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")
        if not partner_id:
            logger.error(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å partner_id. –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")

        if not product_id and not partner_id:
            logger.debug("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
            return

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: product_id={product_id}, partner_id={partner_id}")

        text_to_send = message.text
        logger.debug(f"–¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {text_to_send}")

        if not text_to_send:
            await message.answer("–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—É–ø–∏–≤—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç
        users = get_users_by_product_partner(partner_id, product_id)
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = list({user['user_id']: user for user in users}.values())
        logger.debug(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {users}")

        if not users:
            await message.answer("–ù–∏–∫—Ç–æ –µ—â—ë –Ω–µ –∫—É–ø–∏–ª —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç.")
            await state.clear()
            return

        sent_count = 0
        logger.debug(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        for user in users:
            try:
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']} —Å —Ç–µ–∫—Å—Ç–æ–º: {text_to_send}")
                await message.bot.send_message(chat_id=user['user_id'], text=text_to_send)
                sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {str(e)}")

        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.")
    finally:
        await state.clear()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ


@router.message(lambda message: message.text and message.text.strip() in {str(texts['questions_button'].get(lang, '') or '').strip() for lang in texts['questions_button']})
async def show_incoming_questions(message: types.Message, state: FSMContext):
    try:
        partner_id = message.from_user.id  # ID –ø–∞—Ä—Ç–Ω—ë—Ä–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å chat_id
        logging.debug(f"–ü–∞—Ä—Ç–Ω—ë—Ä —Å ID {partner_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã.")

        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ë–î
        questions = get_unanswered_questions_by_partner(partner_id)
        logging.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ {partner_id}: {questions}")

        if not questions:
            logging.info(f"–£ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ {partner_id} –Ω–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardBuilder()
        for q in questions:
            button_text = f"–í–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É ID {q['product_id']}: {q['question_text'][:30]}..."
            logging.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ —Å ID {q['id']} –∏ —Ç–µ–∫—Å—Ç–æ–º: {button_text}")
            keyboard.button(text=button_text, callback_data=f"funny:{q['product_id']}:{q['id']}")

        keyboard.adjust(1)  # –†–µ–≥—É–ª–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É (1 –∫–Ω–æ–ø–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É)
        logging.debug(f"–ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {keyboard.as_markup()}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await state.update_data(product_id=questions[0]['product_id'], question_id=questions[0]['id'], question_text=questions[0]['question_text'])
        logging.debug(f"–í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {questions[0]}")

        await message.answer("–ü–æ—Å—Ç—É–ø–∏–≤—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=keyboard.as_markup())
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Ä—Ç–Ω—ë—Ä—É —Å ID {partner_id}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_incoming_questions: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.")


@router.callback_query(lambda c: c.data.startswith("funny:"))
async def answer_question_callback(callback_query: CallbackQuery, state: FSMContext):
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω callback_query —Å –¥–∞–Ω–Ω—ã–º–∏: {callback_query.data}")

    try:
        # –†–∞–∑–±–æ—Ä callback –¥–∞–Ω–Ω—ã—Ö
        data = callback_query.data.split(":")
        if len(data) != 3 or not data[1].isdigit() or not data[2].isdigit():
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback_query: {callback_query.data}")

        action = data[0]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 'answer_question_two'
        product_id = int(data[1])  # ID –ø—Ä–æ–¥—É–∫—Ç–∞
        question_id = int(data[2])  # ID –≤–æ–ø—Ä–æ—Å–∞

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logging.debug(f"–î–∞–Ω–Ω—ã–µ –∏–∑ callback: Product ID: {product_id}, Question ID: {question_id}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(product_id=product_id, question_id=question_id)
        logging.debug(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {await state.get_data()}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        question = get_question_from_user_by_product_and_question_id(product_id, question_id)
        if not question:
            logging.error(f"–í–æ–ø—Ä–æ—Å —Å ID {question_id} –∏ product_id {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            await callback_query.message.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_id = question['user_id']
        question_text = question['question_text']
        logging.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}. –í–æ–ø—Ä–æ—Å: {question_text}")

        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.")
        await state.set_state(waitPartnerAnswer.waiting_for_answer)  # –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        logging.debug("–ü–µ—Ä–µ—à–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'waiting_for_answer'.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

@router.message(waitPartnerAnswer.waiting_for_answer)
async def process_answer_to_question(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        logging.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")

        product_id = data.get("product_id")  # –ü–æ–ª—É—á–∞–µ–º product_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        question_id = data.get("question_id")
        answer_text = message.text
        logging.debug(f"product_id={product_id}, question_id={question_id}, answer_text={answer_text}")

        if not question_id:
            logging.warning(f"–í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç question_id –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            await state.clear()
            return

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –≤–æ–ø—Ä–æ—Å–∞
        logging.debug(f"–ü–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é get_question_from_user_by_product_and_question_id product_id={product_id}, question_id={question_id}")
        question = get_question_from_user_by_product_and_question_id(product_id, question_id)
        logging.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç get_question_from_user_by_product_and_question_id({product_id}, {question_id}): {question}")

        if not question:
            logging.warning(f"–í–æ–ø—Ä–æ—Å —Å ID {question_id} –∏ product_id {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            await message.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_id = question['user_id']
        question_text = question['question_text']
        logging.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}. –í–æ–ø—Ä–æ—Å: {question_text}, –û—Ç–≤–µ—Ç: {answer_text}")

        await message.bot.send_message(
            user_id,
            f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É:\n\n{question_text}\n\n–û—Ç–≤–µ—Ç: {answer_text}"
        )
        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞
        mark_question_as_answered(question_id)
        logging.info(f"–í–æ–ø—Ä–æ—Å —Å ID {question_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π.")

        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_answer_to_question: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.")
        await state.clear()

class LotteryStates(StatesGroup):
    awaiting_ticket_number = State()

@router.message(lambda message: message.text and message.text.strip() in {str(texts['participate_in_the_lottery_button'].get(lang, '') or '').strip() for lang in texts['participate_in_the_lottery_button']})
async def participate_lottery(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, ticket_price FROM lottery WHERE active = 1")
        lottery = cursor.fetchone()

        if not lottery:
            await message.reply("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π.")
            return

        lottery_id, ticket_price = lottery

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞" –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ—Ç–µ—Ä–µ–∏
        cursor.execute(
            """
            SELECT ticket_number FROM lottery_tickets 
            WHERE lottery_id = ? AND user_id = ? AND prize = '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞' AND used = 0
            """,
            (lottery_id, user_id)
        )
        retry_ticket = cursor.fetchone()

        if retry_ticket:
            await message.reply(
                "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –±–∏–ª–µ—Ç '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞'. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ –±–∏–ª–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å (1-1000):")
            await state.update_data(lottery_id=lottery_id, ticket_price=0, retry_ticket_number=retry_ticket[0])
        else:
            cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
            user = cursor.fetchone()

            if not user or user[0] < ticket_price:
                await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞.")
                return

            await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å (1-1000):")
            await state.update_data(lottery_id=lottery_id, ticket_price=ticket_price, retry_ticket_number=None)

        await state.set_state(LotteryStates.awaiting_ticket_number)

@router.message(LotteryStates.awaiting_ticket_number)
async def process_ticket_number(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    ticket_number = int(message.text)

    if not 1 <= ticket_number <= 1000:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 1000.")
        return

    data = await state.get_data()
    lottery_id = data['lottery_id']
    ticket_price = data['ticket_price']
    retry_ticket_number = data.get('retry_ticket_number')

    with connect_db() as conn:
        cursor = conn.cursor()

        cursor.execute(
            "SELECT ticket_number FROM lottery_tickets WHERE lottery_id = ? AND ticket_number = ? AND user_id IS NULL",
            (lottery_id, ticket_number)
        )
        ticket = cursor.fetchone()

        if not ticket:
            await message.reply("–≠—Ç–æ—Ç –±–∏–ª–µ—Ç —É–∂–µ –∫—É–ø–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.")
            return

        if retry_ticket_number:
            # –û—Ç–º–µ—Ç–∏—Ç—å –±–∏–ª–µ—Ç "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞" –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            cursor.execute(
                "UPDATE lottery_tickets SET used = 1 WHERE ticket_number = ? AND lottery_id = ?",
                (retry_ticket_number, lottery_id)
            )
        elif ticket_price > 0:
            cursor.execute(
                "UPDATE users SET balance = balance - ? WHERE user_id = ?",
                (ticket_price, user_id)
            )

        cursor.execute(
            "UPDATE lottery_tickets SET user_id = ?, username = ? WHERE ticket_number = ? AND lottery_id = ?",
            (user_id, username, ticket_number, lottery_id)
        )
        conn.commit()

    await state.clear()
    await message.reply(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –±–∏–ª–µ—Ç #{ticket_number}.")


@router.message(lambda message: message.text and message.text.strip() in {str(texts['tickets_button'].get(lang, '') or '').strip() for lang in texts['tickets_button']})
async def view_my_tickets(message: types.Message):
    user_id = message.from_user.id

    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute(
            """
            SELECT lt.ticket_number, lt.prize 
            FROM lottery_tickets lt
            JOIN lottery l ON lt.lottery_id = l.id
            WHERE lt.user_id = ? AND l.active = 1
            """,
            (user_id,)
        )
        tickets = cursor.fetchall()

    if tickets:
        response = "\n".join([f"–ë–∏–ª–µ—Ç #{ticket[0]}: {ticket[1]}" for ticket in tickets])
    else:
        response = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ—è—Ö."

    await message.reply(response)

class DonationState(StatesGroup):
    waiting_for_lottery_choice = State()
    waiting_for_amount = State()

@router.message(lambda message: message.text and message.text.strip() in {str(texts['donations_button'].get(lang, '') or '').strip() for lang in texts['donations_button']})
async def donate_to_fund(message: types.Message, state: FSMContext):
    with connect_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM lottery WHERE active = 1")
        active_lotteries = cursor.fetchall()

    if not active_lotteries:
        await message.reply("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π.")
        return

    buttons = [types.KeyboardButton(text=lottery[1]) for lottery in active_lotteries]

    keyboard = types.ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç–µ—Ä–µ—é –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(DonationState.waiting_for_lottery_choice)
    await state.update_data(lotteries=active_lotteries)


@router.message(DonationState.waiting_for_lottery_choice)
async def process_lottery_choice(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lotteries = data['lotteries']
    lottery_choice = message.text

    selected_lottery = next((lottery for lottery in lotteries if lottery[1] == lottery_choice), None)

    if selected_lottery:
        await state.update_data(selected_lottery_id=selected_lottery[0])
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(DonationState.waiting_for_amount)
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π.")

@router.message(DonationState.waiting_for_amount)
async def process_donation_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.")

        data = await state.get_data()
        lottery_id = data['selected_lottery_id']

        with connect_db() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE lottery SET fund = fund + ? WHERE id = ?",
                (amount, lottery_id)
            )
            conn.commit()

        await message.reply(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} VED!")
        await state.clear()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è):")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
@router.message(lambda message: message.text and message.text.strip() in {str(texts['language_button'].get(lang, '') or '').strip() for lang in texts['language_button']})
async def change_language(message: types.Message):
    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")],
        [InlineKeyboardButton(text="English", callback_data="set_lang_en")]
    ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
@router.message(lambda message: message.text and message.text.strip() in {str(texts['language_button'].get(lang, '') or '').strip() for lang in texts['language_button']})
async def change_language(message: types.Message):
    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")],
        [InlineKeyboardButton(text="English", callback_data="set_lang_en")]
    ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
@router.callback_query(lambda callback_query: callback_query.data.startswith("set_lang_"))
async def set_language(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    language = "ru" if callback_query.data == "set_lang_ru" else "en"

    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_user_language(user_id, language)

    await callback_query.answer("–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω." if language == "ru" else "Language changed successfully.")
    await callback_query.message.edit_reply_markup()  # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_language = language  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    user_role = await get_user_role(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Ñ–æ—Ä–∏–∑–º–∞
    aphorism = get_random_aphorism()
    aphorism_text = f"¬´{aphorism[0]}¬ª\n¬© {aphorism[1]}" if aphorism else "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_file_id = get_random_image()

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    menu_buttons = [
        [KeyboardButton(text=texts['products_button'][user_language]),
         KeyboardButton(text=texts['friends_button'][user_language])],
        [KeyboardButton(text=texts['balance_button'][user_language]),
         KeyboardButton(text=texts['partners_button'][user_language])],
        [KeyboardButton(text=texts['info_button'][user_language]),
         KeyboardButton(text=texts['personal_account'][user_language])],
        [KeyboardButton(text="üè†")]  # –ö–Ω–æ–ø–∫–∞ –î–æ–º–∏–∫
    ]

    if user_role == 'admin' or user_id == int(ADMIN_ID):
        menu_buttons.append([KeyboardButton(text=texts['admin_panel_button'][user_language])])

    menu_markup = ReplyKeyboardMarkup(keyboard=menu_buttons, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ —Å –∞—Ñ–æ—Ä–∏–∑–º–æ–º
    if image_file_id:
        await callback_query.message.answer_photo(photo=image_file_id, caption=aphorism_text, reply_markup=menu_markup)
    else:
        await callback_query.message.answer(aphorism_text, reply_markup=menu_markup)






@router.message(lambda message: message.text and message.text.strip() in {str(texts['add_lesson_button'].get(lang, '') or '').strip() for lang in texts['add_lesson_button']})
async def add_lesson_command(message: types.Message, state: FSMContext):
    partner_id = message.from_user.id
    courses = await get_courses_by_partner(partner_id)
    if not courses:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫—É—Ä—Å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_course.")
        return
    for course in courses:
        print(course)
    buttons = [
        InlineKeyboardButton(
            text=course.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            callback_data=f"select_course_{course['id']}"
        )
        for course in courses
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫:", reply_markup=keyboard)
    await state.set_state("waiting_for_course_selection")
@router.callback_query(StateFilter("waiting_for_course_selection"))
async def process_course_selection(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if not data.startswith("select_course_"):
        await callback_query.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    course_id = int(data.replace("select_course_", ""))
    await state.update_data(course_id=course_id)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞:")
    await state.set_state("waiting_for_lesson_title")
    await callback_query.answer()
@router.message(StateFilter("waiting_for_course_selection"))
async def process_course_selection(message: types.Message, state: FSMContext):
    course = await get_course_by_id(message.text)  # Ensure course title matches exactly
    if not course:
        await message.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(course_id=course.id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞:")
    await state.set_state("waiting_for_lesson_title")
@router.message(StateFilter("waiting_for_lesson_title"))
async def process_lesson_title(message: types.Message, state: FSMContext):
    lesson_title = message.text
    await state.update_data(lesson_title=lesson_title)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É—Ä–æ–∫–∞:")
    await state.set_state("waiting_for_lesson_description")
@router.message(StateFilter("waiting_for_lesson_description"))
async def process_lesson_description(message: types.Message, state: FSMContext):
    lesson_description = message.text
    data = await state.get_data()
    lesson_title = data.get("lesson_title")
    course_id = data.get("course_id")
    if not course_id:
        await message.answer("–û—à–∏–±–∫–∞: ID –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫—É—Ä—Å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_course.")
        return
    await add_lesson(course_id=course_id, title=lesson_title, description=lesson_description)
    await message.answer(f"–£—Ä–æ–∫ '{lesson_title}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—É—Ä—Å.")
    await state.clear()
@router.message(StateFilter("waiting_for_course_description"))
async def process_course_description(message: types.Message, state: FSMContext):
    course_description = message.text
    data = await state.get_data()
    course_title = data.get("course_title")
    course_id = await add_course(title=course_title, description=course_description)
    await state.update_data(course_id=course_id)

    await message.answer(f"–ö—É—Ä—Å '{course_title}' (ID: {course_id}) –¥–æ–±–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —É—Ä–æ–∫–∏.")
    await state.clear()






# –ü—Ä–∏–º–µ—Ä –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGES = {
    "main_menu": {
        "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    },
    "personal_info": {
        "welcome": "–í—ã –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "no_purchases": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.",
        "purchases_list": "–í–∞—à–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω–Ω—ã–µ –∫—É—Ä—Å—ã:",
        "no_progress": "–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —ç—Ç–æ–º—É –∫—É—Ä—Å—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
        "settings": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:"
    }
}
